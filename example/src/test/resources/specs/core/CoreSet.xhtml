<html xmlns:e="http://exam.extension.io" xmlns:cc="http://www.concordion.org/2007/concordion">
<body>
<h1>Core set command</h1>

<p class="lead">Handlebars aware set command.</p>

<h2>Overview</h2>

<p>
    Command may be used as drop-in replacements for
    <a href="https://concordion.org/instrumenting/java/html/#set-command">Concordion set command</a>
    when handlebars-template support is needed.
</p>

<h2>Examples</h2>

<p>
    New variable could be created in the following ways:
</p>

<e:example name="before">
    Given concordion variable <code>ccVar</code> = <code cc:set="#ccVar">1</code>
</e:example>

<h3>Setting variable</h3>

<p>
    Variable can be initialized with text, object and content from a file.
</p>

<e:example name="text">
    <e:when>
        <code e:set="#newVar" print="true">concordion var = {{ccVar}}</code>
    </e:when>
    <e:then>
        <code>newVar</code> has value: <code cc:assertEquals="#newVar">concordion var = 1</code>
    </e:then>
</e:example>

<e:example name="object">
    <e:when>
        <code e:set="#newVar" print="true">{{map a='1'}}</code>
    </e:when>
    <e:then>
        <code>newVar</code> has value: <code cc:assertEquals="#newVar">{a=1}</code>
    </e:then>
</e:example>

<e:example name="file">
    <e:when>
        <pre e:set="#newVar" print="true">{{file '/data/core/file.txt' v='123'}}</pre>
    </e:when>
    <e:then>
        <code>newVar</code> has value: <code cc:assertEquals="#newVar">File template: v = 123, ccVar = 1</code>
    </e:then>
</e:example>

<h3>Hidden set</h3>

<p>
    To set variable without rendering use <code>hidden</code> attribute.
</p>

<e:example name="hidden">
    <e:when>
        <code e:set="#newVar" hidden="" print="true">1</code>
    </e:when>
    <e:then>
        <code>newVar</code> has value: <code cc:assertEquals="#newVar">1</code>
    </e:then>
</e:example>

<h3>Pretty-print</h3>

<p>
    Exam uses <a href="https://highlightjs.org/">highlightjs library</a> for code highlighting,
    which can be used according to documentation:
</p>

<blockquote class="blockquote blockquote-custom bg-white p-5 shadow rounded">
    <i class="fas fa-quote-left fa-lg text-info me-2"> </i>
    <p class="mb-0 mt-2">
        <em>
        "This will find and highlight code inside of <strong>&lt;pre>&lt;code></strong> tags;
        it tries to detect the language automatically.
        If automatic detection doesnâ€™t work for you, or you simply prefer to be explicit,
        you can specify the language manually in the using the class attribute..."
        </em>
    </p>
    <footer class="blockquote-footer pt-1 mt-1">
        <a href="https://highlightjs.org/usage/">https://highlightjs.org/usage/</a>
    </footer>
</blockquote>

<e:example name="Pretty-print">
    <e:when>
        <pre class="language-json" print="true"><code e:set="#newVar">{ "a" : 1 }</code></pre>
    </e:when>
    <e:then>
        <code>vPretty</code> has value: <code cc:assertEquals="#newVar">{ "a" : 1 }</code>
    </e:then>
</e:example>

</body>
</html>
